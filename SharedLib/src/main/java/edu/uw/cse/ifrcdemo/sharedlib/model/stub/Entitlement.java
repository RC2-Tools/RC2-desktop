/*
 * Copyright (c) 2016-2022 University of Washington
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 *  *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *  * Neither the name of the University of Washington nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF WASHINGTON AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF WASHINGTON OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package edu.uw.cse.ifrcdemo.sharedlib.model.stub;

import edu.uw.cse.ifrcdemo.sharedlib.model.datattype.AuthorizationType;
import edu.uw.cse.ifrcdemo.sharedlib.model.datattype.EntitlementStatus;

public interface Entitlement extends ModelStub {
  /**
   * OPTIONAL: Used if the entitlement is only valid for an individual item pack
   * @return
   */
  String getAssignedItemPackCode();

  /**
   * OPTIONAL: Used if the entitlement is only valid for an individual item pack
   * @param assignedItemPackCode
   */
  void setAssignedItemPackCode(String assignedItemPackCode);

  /**
   * REQUIRED: The foreign key for to the authorization that allowed this entitlement
   * @return
   */
  String getAuthorizationId();

  /**
   * REQUIRED: The foreign key for to the authorization that allowed this entitlement
   * @param authorizationId
   */
  void setAuthorizationId(String authorizationId);

  /**
   * REQUIRED: The type of authorization (token, registration, etc)
   * @return
   */
  AuthorizationType getAuthorizationType();

  /**
   * REQUIRED: The type of authorization (token, registration, etc)
   * @param authorizationType
   */
  void setAuthorizationType(AuthorizationType authorizationType);

  /**
   * REQUIRED: The beneficiary entity to deliver this entitlement to
   * @return
   */
  String getBeneficiaryEntityId();

  /**
   * REQUIRED: The beneficiary entity to deliver this entitlement to
   * @param beneficiaryEntityId
   */
  void setBeneficiaryEntityId(String beneficiaryEntityId);

  /**
   * REQUIRED: Date this entitlement was created
   * @return
   */
  String getDateCreated();

  /**
   * REQUIRED: Date this entitlement was created
   * @param dateCreated
   */
  void setDateCreated(String dateCreated);

  /**
   * REQUIRED: Name of the distribution
   * @return
   */
  String getDistributionName();

  /**
   * REQUIRED: Name of the distribution
   * @param distributionName
   */
  void setDistributionName(String distributionName);

  /**
   * OPTIONAL: The individual to delivery this entitlement to
   * @return
   */
  String getMemberId();

  /**
   * OPTIONAL: The individual to delivery this entitlement to
   * @param memberId
   */
  void setMemberId(String memberId);

  /**
   * REQUIRED: True if this entitlement was generated by a supervisor override rather than a standard authorization or entitlement
   * @return
   */
  String getIsOverride();

  /**
   * REQUIRED: True if this entitlement was generated by a supervisor override rather than a standard authorization or entitlement
   * @param isOverride
   */
  void setIsOverride(String isOverride);

  /**
   * OPTIONAL: Description of the item pack copied from the item pack table on the PC
   * @return
   */
  String getItemPackDescription();

  /**
   * OPTIONAL: Description of the item pack copied from the item pack table on the PC
   * @param itemPackDescription
   */
  void setItemPackDescription(String itemPackDescription);

  /**
   * REQUIRED: The foreign key for the item pack table on the PC
   * @return
   */
  String getItemPackId();

  /**
   * REQUIRED: The foreign key for the item pack table on the PC
   * @param itemPackId
   */
  void setItemPackId(String itemPackId);

  /**
   * OPTIONAL: The name of the item pack from the item pack table on the PC
   * @return
   */
  String getItemPackName();

  /**
   * OPTIONAL: The name of the item pack from the item pack table on the PC
   * @param itemPackName
   */
  void setItemPackName(String itemPackName);

  /**
   * REQUIRED: The status of the entitlement (enabled, disabled, etc)
   * @return
   */
  EntitlementStatus getStatus();

  /**
   * REQUIRED: The status of the entitlement (enabled, disabled, etc)
   * @param status
   */
  void setStatus(EntitlementStatus status);

  /**
   * OPTIONAL: An optional reason for assigning the current status
   * @return
   */
  String getStatusReason();

  /**
   * OPTIONAL: An optional reason for assigning the current status
   * @param statusReason
   */
  void setStatusReason(String statusReason);
}
